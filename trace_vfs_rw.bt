#include <linux/fs.h>
#include <linux/path.h>
#include <linux/dcache.h>
#include <linux/types.h>
#include <uapi/asm-generic/posix_types.h>


BEGIN
{
	printf("Capturing VFS Read and Write calls\n");

	printf("%-17s %-9s %-6s %-14s %-4s %-7s ", "TIMESTAMP", "TIME", "PID", "COMM", "R/W", "LAT(ns)");
	printf("%-10s %-10s %s\n", "REQUESTED", "RETURNED", "FILE");
}

kprobe:vfs_read
/ comm == "python"/
{
	@start[tid] = nsecs;
	@req[tid] = arg2;
	@off[tid] = arg3;
	@filename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}


kretprobe:vfs_read
/@start[tid]/
{
	$now = nsecs;
	
	printf("%-17lu ", $now);
	time("%H:%M:%S  ");

	printf("%-6d %-14s %-4s %-7d %-10d ", 
		pid,
		comm,
		"R",
		$now - @start[tid],
		@req[tid]);

	printf("%-10d %s\n", retval, @filename[tid]);

	delete(@start[tid]);
	delete(@req[tid]);
	delete(@off[tid]);
	delete(@filename[tid]);
}



kprobe:vfs_write
/ comm == "python"/
{
    @wstart[tid] = nsecs;
	@wreq[tid] = arg2;
	@woff[tid] = arg3;
	@wfilename[tid] = str(((struct file *)arg0)->f_path.dentry->d_name.name);
}

kretprobe:vfs_write
/@wstart[tid]/
{
    $now = nsecs;
	
	printf("%-17lu ", $now);

	time("%H:%M:%S  ");

	printf("%-6d %-14s %-4s %-7d %-10d ",
		pid,
		comm,
		"W",
		$now - @wstart[tid],
		@wreq[tid]
	);

	printf("%-10d %s\n", retval, @wfilename[tid]);

	delete(@wstart[tid]);
	delete(@wreq[tid]);
	delete(@woff[tid]);
	delete(@wfilename[tid]);
}


END 
{
    clear(@start);
	clear(@req);
	clear(@off);
	clear(@filename);

	clear(@wstart);
	clear(@wreq);
	clear(@woff);
	clear(@wfilename);		
}
